# -*- coding: utf-8 -*-
from __future__ import division
import sys
import os
from PyQt4 import QtGui, QtCore, uic
from PyQt4.QtCore import *
from PyQt4.QtGui import *
import math
import selection10
from selection10 import *
from selection10 import nastavi_cat, selekcija_total
from collections import defaultdict
import shutil
import pandas as pd
import numpy as np
import resource



#nalozi GUI za selekcijo
#qtCreatorFile = '/home/jana/Genotipi/Genotipi_CODES/SelectionParameters.ui' # Enter file here.
qtCreatorFile = '/home/jana/Genotipi/Genotipi_CODES/SelectionParameters.ui' # Enter file here.
Ui_MainWindow, QtBaseClass = uic.loadUiType(qtCreatorFile)


class estimateBV:
    def __init__(self, AlphaSimDir, way, sel):
        self.AlphaSimDir = AlphaSimDir
        self.way = way
        self.sel = sel

    def computeEBV(self, nbIndGen):
        # pripravi fajle za blupf90
        blupFiles = blupf90(self.AlphaSimDir, way=self.way, sel=self.sel)
        # listUnphenotyped = ['potomciNP', 'nr', 'telF', 'telM', 'pt', 'mladi', 'vhlevljeni', 'cak'] #list of unphenotyped categories (better ages?)
        # blupFiles.preparePedDat_cat(listUnphenotyped) #pripravi ped, dat file za blup #skopiraj generičen paramfile v AlphaSim Directory
        if self.way == 'milk':
            blupFiles.makeDat_removePhen_milk()  # odstrani genotip moškim živali in pripravi dat file - repetabaility model
        if self.way == 'burnin_milk':  # če je takoj po burn inu - nimaš še kategorij (za prvih n burningeneracij brze dodane naslednje)
            blupFiles.makeDat_sex(2)
        #skopiraj paramFile za renumf90
        if self.sel == 'gen':
            shutil.copy(blupFiles.blupgenParamFile, blupFiles.AlphaSimDir + 'renumf90.par')  # skopiraj template blupparam file
        if self.sel == 'class':
            shutil.copy(blupFiles.blupgenParamFile_Clas, blupFiles.AlphaSimDir + 'renumf90.par')  # skopiraj template blupparam file

        # uredi blupparam file
        # get variance components from AlphaSim Output Files
        OutputFiles = AlphaSim_OutputFile(self.AlphaSimDir)
        genvar = OutputFiles.getAddVar()  # dobi additivno varianco
        resvar = OutputFiles.getResVar()  # dobi varianco za ostanek

        blupFiles.prepareParamFiles(genvar, resvar, self.AlphaSimDir + '/renumf90.par')  # set levels of random aniaml effect, add var and res var
        # the paramfile is now set
        blupFiles.makePed_gen()  # make ped file for blup, no Code!
        if self.sel == 'gen':
            GenFiles = snpFiles(self.AlphaSimDir)
            GenFiles.createBlupf90SNPFile()
4232,
         'AlphaSimDir': '/home/jana/bin/AlphaSim1.05Linux/', 'pripust2n': 0.3999999999999999, 'stNBn': 8640,
         'pripustDoz': 27, 'telMn': 3153, 'gEBV': True, 'pripustUp': 1.4, 'bmUp': 3,
         'genotyped': [('potomciNP', 100.0, 'random', 'M'), ('pb', 100.0, 'random', 'M')], 'pozitivnoTestDoz': 400,
         'StBurnInGen': 20, 'NumberOfDams': 3500, 'mladiDoz': 250, 'bik12n': 378, 'nrFn': 4275, 'mladin': 8,
         'NumberOfSires': 4, 'bmn': 129, 'genpripust1n': 41, 'pripust1n': 19, 'potomciNPn': 45, 'vhlevljenin': 27,
         'StSelGen': 40, 'BurnInYN': False, 'telFnTotal': 4277, 'bmOdbira': 2, 'kn': 10782, 'cak': 3, 'EBV': False,
         'pbn': 4, 'genpbn': 5, 'pbUp': 5}
        izl
        322914
        k
        10653
        telF
        4277
        pt
        3849
        telM
        3153
        bik12
        378
        pBM
        129
        pb
        100
        genTest
        45
        bm
        43
        cak
        24
        pripust1
        19
        pripust2
        8
        mladi
        8
        Name: cat, dtype: int64
        90
        izl
        322914
        k
        10653
        nr
        8550
        telF
        4277
        pt
        3849
        telM
        3153
        bik12
        378
        pBM
        129
        pb
        100
        potomciNP
        90
        genTest
        45
        bm
        43
        cak
        24
        pripust1
        19
        pripust2
        8
        mladi
        8
        Name: cat, dtype: int64
        2
        323038
        1
        31202
        Name: active, dtype: int64
        GenTest0

        ** ** ** ** ** ** ** ** ** ** **
        * *
        *AlphaSim *
        * *
        ** ** ** ** ** ** ** ** ** ** **
        VERSION:commit - 1801
        eac

    Software
    for simulating phenotype, sequence, and SNP data

    No
    Liability


Bugs
to
John.Hickey @ roslin.ed.ac.uk

Input
File: AlphaSimSpec.txt

Modelling
population
history
using
InternalCattle
NOTE: When
writing
out
the
full
sequences,
WriteFullSequenceOutOnOff
must
be
On
from the first

burn - in generation

Pedigree
imported
for generation  41

Selection is performed
using
TBV

Generation
40 / Selection
cycle
21
External
pedigree
successfully
imported
EBVacc
GVmean
VarG
1.00000
1.89399
0.92073

Last
Generation
41
EBVacc
GVmean
VarG
1.00000
2.00352
0.88510

Time
duration
of
AlphaSim = 995.4080
seconds.

RENUMF90
version
1.122
name
of
parameter
file? renumf90.par
datafile:Blupf90.dat
traits:           2
R
6.974

Processing
effect
1
of
type
cross
item_kind = alpha
pedigree
file
name
"Blupf90.ped"
positions
of
animal, sire, dam, alternate
dam, yob, and group
1
2
3
0
0
0
SNP
file
name
"GenoFile.txt"
all
pedigrees
to
be
included
Reading(CO)
VARIANCES:           1
x
1

Maximum
size
of
character
fields: 20

Maximum
size
of
record(max_string_readline): 800

Maximum
number
of
fields
for input file(max_field_readline): 100

Pedigree
search
method(ped_search): convention

Missing
observation
code(missing): 0

hash
tables
for effects set up
table
expanded
from

10000
to
20000
records
table
expanded
from

20000
to
40000
records
table
expanded
from

40000
to
80000
records
table
expanded
from

80000
to
160000
records
table
expanded
from

160000
to
320000
records
read
313725
records
added
count
Effect
group
1
of
column
1
with       155682  levels
wrote
statistics in file
"renf90.tables"

Basic
statistics
for input data(missing value code is 0)
Pos
Min
Max
Mean
SD
N
2 - 14.339
12.862 - 0.19524E-01
2.9805
313725

random
effect
with SNPs  1
type: animal
file: GenoFile.txt
read
SNPs
10402
records
Effect
group
1
of
column
1
with       155827  levels

random
effect
1
type:animal
opened
output
pedigree
file
"renadd01.ped"
table
expanded
from

320000
to
640000
records
read
354240
pedigree
records
loaded
198413
parent(s) in round
0

Pedigree
checks

Number
of
animals
with records:      155682
Number
of
animals
with genotypes:       10402
Number
of
animals
with records or genotypes:      155827
Number
of
animals
with genotypes and no records         145
Number
of
parents
without
records or genotypes:      198413
Total
number
of
animals:      354240

Wrote
cross
reference
IDs
for SNP file "GenoFile.txt_XrefID"

Wrote
parameter
file
"renf90.par"
Wrote
renumbered
data
"renf90.dat"
313725
records

renf90.par

Options
read
from parameter file:

*SNP
file: GenoFile.txt
*SNP
Xref
file: GenoFile.txt_XrefID
*Map
file: SnpMap.txt
*No
Quality
Control
Checks !!!!! (default.false.):  T
BLUPF90
1.55

Parameter
file:             renf90.par
Data
file:                  renf90.dat
Number
of
Traits
1
Number
of
Effects
1
Position
of
Observations
1
Position
of
Weight(1)
0
Value
of
Missing
Trait / Observation
0

EFFECTS
#  type                position (2)        levels   [positions for nested]
1
cross - classified
2
354240

Residual(co)
variance
Matrix
6.9739

Random
Effect(s)
1
Type
of
Random
Effect:      additive
animal
Pedigree
File:              renadd01.ped
trait
effect(CO)
VARIANCES
1
1
2.325

REMARKS
(1)
Weight
position
0
means
no
weights
utilized
(2)
Effect
positions
of
0
for some effects and traits means that such
effects
are
missing
for specified traits

Data
record
length = 2
# equations =       354240
G
2.3246
hash
matrix
increased
from

131072
to
262144 % filled:     0.8000
read
313725
records in 0.3280000
s, 155682
nonzeroes
hash
matrix
increased
from

262144
to
524288 % filled:     0.8000
hash
matrix
increased
from

524288
to
1048576 % filled:     0.8000
hash
matrix
increased
from

1048576
to
2097152 % filled:     0.8000
read
354240
additive
pedigrees

*-------------------------------------------------------------- *
*Genomic
Library: Dist
Version
1.217 *
* *
*Optimized
OpenMP
Version - 8
threads *
* *
*Modified
relationship
matrix(H)
created
for effect:   1 *
*-------------------------------------------------------------- *

Read
354240
animals
from pedigree file: "renadd01.ped"
Number
of
Genotyped
Animals: 10402

Creating
A22
Extracting
subset
of: 50864
pedigrees
from: 354240
elapsed
time:     0.0360
Calculating
A22
Matrix
by
Colleau
OpenMP...elapsed
time: 1.5826
Numbers
of
threads = 4
8

Reading
SNP
file
Column
position in file
for the first marker: 12
Format
to
read
SNP
file: (11
x, 400000
i1)
Number
of
SNPs: 20000
Format: integer
genotypes(0
to
5) to
double - precision
array
Number
of
Genotyped
animals: 10402
Reading
SNP
file
elapsed
time: 8.26

Statistics
of
alleles
frequencies in the
current
population
N:          20000
Mean:       0.433
Min:        0.000
Max:        1.000
Var:        0.141

Reading
MAP
file: "SnpMap.txt" - 20000
SNPs
out
of
20000

Min and max  # of chromosome: 1 10

Min and max  # of SNP: 1 20000

Quality
Control - Monomorphic
SNPs
Exist - NOT
REMOVED: 4851

Genotypes
missings( %):  0.000

Calculating
G
Matrix
Dgemm
MKL  # threads=     4    8 Elapsed omp_get_time:    27.4968

Scale
by
Sum(2
pq).Average:   4195.92157715607

Blend
G as alpha * G + beta * A22: (alpha, beta)
0.950
0.050

Frequency - Diagonal
of
G
N:       10402
Mean:        1.378
Min:         1.133
Max:         1.839
Range:       0.035
Class:     20

# Class       Class   Count
1
1.133
1
2
1.168
3
3
1.204
40
4
1.239
247
5
1.274
906
6
1.309
1936
7
1.345
2567
8
1.380
2189
9
1.415
1410
10
1.451
636
11
1.486
279
12
1.521
105
13
1.556
43
14
1.592
26
15
1.627
5
16
1.662
2
17
1.697
1
18
1.733
2
19
1.768
2
20
1.803
2
21
1.839
0

Check
for diagonal of genomic relationship matrix

** High
Diagonal
of
genotype
1
1.84
Not
Removed
** High
Diagonal
of
genotype
2
1.77
Not
Removed
** High
Diagonal
of
genotype
3
1.78
Not
Removed
** High
Diagonal
of
genotype
4
1.83
Not
Removed
** High
Diagonal
of
genotype
6
1.64
Not
Removed
** High
Diagonal
of
genotype
8
1.62
Not
Removed
** High
Diagonal
of
genotype
9
1.75
Not
Removed
** High
Diagonal
of
genotype
10
1.62
Not
Removed
** High
Diagonal
of
genotype
11
1.65
Not
Removed
** High
Diagonal
of
genotype
12
1.73
Not
Removed
** High
Diagonal
of
genotype
513
1.62
Not
Removed
** High
Diagonal
of
genotype
643
1.60
Not
Removed
** High
Diagonal
of
genotype
2421
1.62
Not
Removed
** High
Diagonal
of
genotype
3137
1.61
Not
Removed
** High
Diagonal
of
genotype
3220
1.60
Not
Removed
** High
Diagonal
of
genotype
3999
1.61
Not
Removed
** High
Diagonal
of
genotype
4483
1.60
Not
Removed
** High
Diagonal
of
genotype
4903
1.60
Not
Removed
** High
Diagonal
of
genotype
5539
1.64
Not
Removed
** High
Diagonal
of
genotype
5638
1.62
Not
Removed
** High
Diagonal
of
genotype
5939
1.61
Not
Removed
** High
Diagonal
of
genotype
6044
1.62
Not
Removed
** High
Diagonal
of
genotype
6102
1.71
Not
Removed
** High
Diagonal
of
genotype
6121
1.61
Not
Removed
** High
Diagonal
of
genotype
6417
1.60
Not
Removed
** High
Diagonal
of
genotype
6545
1.61
Not
Removed
** High
Diagonal
of
genotype
7044
1.69
Not
Removed
** High
Diagonal
of
genotype
7106
1.60
Not
Removed
** High
Diagonal
of
genotype
7555
1.61
Not
Removed
** High
Diagonal
of
genotype
7665
1.67
Not
Removed
** High
Diagonal
of
genotype
8001
1.66
Not
Removed
** High
Diagonal
of
genotype
8827
1.61
Not
Removed
** High
Diagonal
of
genotype
8927
1.62
Not
Removed
** High
Diagonal
of
genotype
9300
1.65
Not
Removed
** High
Diagonal
of
genotype
9646
1.63
Not
Removed
** High
Diagonal
of
genotype
9919
1.62
Not
Removed

Check
for diagonal of genomic relationship matrix, genotypes not removed: 36

------------------------------
Final
Pedrigree - Based
Matrix
------------------------------

Statistic
of
Rel.Matrix
A22
N
Mean
Min
Max
Var
Diagonal
10402
1.378
1.224
1.577
0.001
Off - diagonal
108191202
0.761
0.470
1.328
0.002

----------------------
Final
Genomic
Matrix
----------------------

Statistic
of
Genomic
Matrix
N
Mean
Min
Max
Var
Diagonal
10402
1.378
1.133
1.839
0.004
Off - diagonal
108191202
0.761
0.479
1.358
0.003

Correlation
of
Genomic
Inbreeding and Pedigree
Inbreeding
Correlation:     0.1314

All
elements - Diagonal / Off - Diagonal
Estimating
Regression
Coefficients
G = b0
11
' + b1 A + e
Regression
coefficients
b0
b1 = 0.319
0.581

Correlation
all
elements
G & A
0.417

Off - Diagonal
Using
108191202
elements
from A22 >= .02000

Estimating
Regression
Coefficients
G = b0
11
' + b1 A + e
Regression
coefficients
b0
b1 = 0.326
0.571

Correlation
Off - Diagonal
elements
G & A
0.408

** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** *
*CORRELATION
FOR
OFF - DIAGONALS
G & A22
IS
LOW
THAN
0.50  !!!!! *
*MISIDENTIFIED
GENOMIC
SAMPLES
OR
POOR
QUALITY
GENOMIC
DATA *
** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** *

Creating
A22 - inverse
Inverse
LAPACK
MKL
dpotrf / i  # threads=    4    8 Elapsed omp_get_time:     9.2622

----------------------
Final
A22
Inv
Matrix
----------------------

Statistic
of
Inv.Rel.Matrix
A22
N
Mean
Min
Max
Var
Diagonal
10402
3.334
1.806
226.863
83.721
Off - diagonal
108191202 - 0.000 - 4.703
2.592
0.000

Creating
G - inverse
Inverse
LAPACK
MKL
dpotrf / i  # threads=    4    8 Elapsed omp_get_time:     8.9444

--------------------------
Final
Genomic
Inv
Matrix
--------------------------

Statistic
of
Inv.Genomic
Matrix
N
Mean
Min
Max
Var
Diagonal
10402
78.501
35.171
5356.830
47646.010
Off - diagonal
108191202 - 0.008 - 115.310
79.044
0.381

Check
for diagonal of Inverse Genomic - Inverse of pedigree relationship matrix

------------------------------
Final
G
Inv - A22
Inv
Matrix
------------------------------

Statistic
of
Inv.Genomic - A22
Matrix
N
Mean
Min
Max
Var
Diagonal
10402
75.167
32.863
5129.967
43736.396
Off - diagonal
108191202 - 0.007 - 110.607
76.453
0.359

*------------------------ *
*Setup
Genomic
Done !!! *
*------------------------ *

hash
matrix
increased
from

2097152
to
4194304 % filled:     0.8000
hash
matrix
increased
from

4194304
to
8388608 % filled:     0.8000
hash
matrix
increased
from

8388608
to
16777216 % filled:     0.8000
hash
matrix
increased
from

16777216
to
33554432 % filled:     0.8000
hash
matrix
increased
from

33554432
to
67108864 % filled:     0.8000
hash
matrix
increased
from

67108864
to
134217728 % filled:     0.8000
finished
peds in 301.0800
s, 55422175
nonzeroes
round = 1
convergence = 3.711
round = 2
convergence = 1.873
round = 3
convergence = 6.758
round = 4
convergence = 1.801
round = 5
convergence = 2.825
round = 6
convergence = 2.758
round = 7
convergence = 1.056
round = 8
convergence = 2.180
round = 9
convergence = 0.8469
round = 10
convergence = 0.8738
round = 11
convergence = 0.9712
round = 12
convergence = 0.6056
round = 13
convergence = 0.6200
round = 14
convergence = 0.3782
round = 15
convergence = 0.2753
round = 16
convergence = 0.2844
round = 17
convergence = 0.2551
round = 18
convergence = 0.2006
round = 19
convergence = 0.2491
round = 20
convergence = 0.1806
round = 21
convergence = 0.1144
round = 22
convergence = 0.1275
round = 23
convergence = 0.7183E-01
round = 24
convergence = 0.5708E-01
round = 25
convergence = 0.6154E-01
round = 26
convergence = 0.5204E-01
round = 27
convergence = 0.5897E-01
round = 28
convergence = 0.4264E-01
round = 29
convergence = 0.3822E-01
round = 30
convergence = 0.3822E-01
round = 31
convergence = 0.3029E-01
round = 32
convergence = 0.2478E-01
round = 33
convergence = 0.2096E-01
round = 34
convergence = 0.1716E-01
round = 35
convergence = 0.1450E-01
round = 36
convergence = 0.1027E-01
round = 37
convergence = 0.7979E-02
round = 38
convergence = 0.5963E-02
round = 39
convergence = 0.5577E-02
round = 40
convergence = 0.5131E-02
round = 41
convergence = 0.5002E-02
round = 42
convergence = 0.3754E-02
round = 43
convergence = 0.3062E-02
round = 44
convergence = 0.2361E-02
round = 45
convergence = 0.2115E-02
round = 46
convergence = 0.1512E-02
round = 47
convergence = 0.1498E-02
round = 48
convergence = 0.1120E-02
round = 49
convergence = 0.9253E-03
round = 50
convergence = 0.1034E-02
round = 51
convergence = 0.7985E-03
round = 52
convergence = 0.9440E-03
round = 53
convergence = 0.8049E-03
round = 54
convergence = 0.7102E-03
round = 55
convergence = 0.5424E-03
round = 56
convergence = 0.4092E-03
round = 57
convergence = 0.3419E-03
round = 58
convergence = 0.2864E-03
round = 59
convergence = 0.2528E-03
round = 60
convergence = 0.2272E-03
round = 61
convergence = 0.1745E-03
round = 62
convergence = 0.1760E-03
round = 63
convergence = 0.1603E-03
round = 64
convergence = 0.1450E-03
round = 65
convergence = 0.1196E-03
round = 66
convergence = 0.9272E-04
round = 67
convergence = 0.6495E-04
round = 68
convergence = 0.6507E-04
round = 69
convergence = 0.4647E-04
round = 70
convergence = 0.4298E-04
round = 71
convergence = 0.3401E-04
round = 72
convergence = 0.3051E-04
round = 73
convergence = 0.2834E-04
round = 74
convergence = 0.2715E-04
round = 75
convergence = 0.2453E-04
round = 76
convergence = 0.1809E-04
round = 77
convergence = 0.1839E-04
round = 78
convergence = 0.1597E-04
round = 79
convergence = 0.1369E-04
round = 80
convergence = 0.1241E-04
round = 81
convergence = 0.8765E-05
round = 82
convergence = 0.7867E-05
round = 83
convergence = 0.5849E-05
round = 84
convergence = 0.5215E-05
round = 85
convergence = 0.4519E-05
round = 86
convergence = 0.4550E-05
round = 87
convergence = 0.4906E-05
round = 88
convergence = 0.3903E-05
round = 89
convergence = 0.3088E-05
round = 90
convergence = 0.2459E-05
round = 91
convergence = 0.2232E-05
round = 92
convergence = 0.1808E-05
round = 93
convergence = 0.1457E-05
round = 94
convergence = 0.1067E-05
round = 95
convergence = 0.8573E-06
round = 96
convergence = 0.9374E-06
round = 97
convergence = 0.6672E-06
round = 98
convergence = 0.7784E-06
round = 99
convergence = 0.6408E-06
round = 100
convergence = 0.6753E-06
round = 101
convergence = 0.4818E-06
round = 102
convergence = 0.4181E-06
round = 103
convergence = 0.3139E-06
round = 104
convergence = 0.2591E-06
round = 105
convergence = 0.2009E-06
round = 106
convergence = 0.1812E-06
round = 107
convergence = 0.1529E-06
round = 108
convergence = 0.1455E-06
round = 109
convergence = 0.1009E-06
round = 110
convergence = 0.7782E-07
round = 111
convergence = 0.7107E-07
round = 112
convergence = 0.6282E-07
round = 113
convergence = 0.5039E-07
round = 114
convergence = 0.4138E-07
round = 115
convergence = 0.3688E-07
round = 116
convergence = 0.3782E-07
round = 117
convergence = 0.3757E-07
round = 118
convergence = 0.2739E-07
round = 119
convergence = 0.2206E-07
round = 120
convergence = 0.1415E-07
round = 121
convergence = 0.1278E-07
round = 122
convergence = 0.1087E-07
round = 123
convergence = 0.9175E-08
round = 124
convergence = 0.7651E-08
round = 125
convergence = 0.7186E-08
round = 126
convergence = 0.6910E-08
round = 127
convergence = 0.5895E-08
round = 128
convergence = 0.4188E-08
round = 129
convergence = 0.3245E-08
round = 130
convergence = 0.3117E-08
round = 131
convergence = 0.2807E-08
round = 132
convergence = 0.2867E-08
round = 133
convergence = 0.2077E-08
round = 134
convergence = 0.1778E-08
round = 135
convergence = 0.1326E-08
round = 136
convergence = 0.1371E-08
round = 137
convergence = 0.1134E-08
round = 138
convergence = 0.1065E-08
round = 139
convergence = 0.7911E-09
round = 140
convergence = 0.6586E-09
round = 141
convergence = 0.4762E-09
round = 142
convergence = 0.4235E-09
round = 143
convergence = 0.3609E-09
round = 144
convergence = 0.3035E-09
round = 145
convergence = 0.2550E-09
round = 146
convergence = 0.2265E-09
round = 147
convergence = 0.1940E-09
round = 148
convergence = 0.1705E-09
round = 149
convergence = 0.1372E-09
round = 150
convergence = 0.1239E-09
round = 151
convergence = 0.8186E-10
round = 152
convergence = 0.7705E-10
round = 153
convergence = 0.7805E-10
round = 154
convergence = 0.5795E-10
round = 155
convergence = 0.4565E-10
round = 156
convergence = 0.3446E-10
round = 157
convergence = 0.3180E-10
round = 158
convergence = 0.3056E-10
round = 159
convergence = 0.2035E-10
round = 160
convergence = 0.1909E-10
round = 161
convergence = 0.1644E-10
round = 162
convergence = 0.1285E-10
round = 163
convergence = 0.9319E-11
round = 164
convergence = 0.1089E-10
round = 165
convergence = 0.9989E-11
round = 166
convergence = 0.9789E-11
round = 167
convergence = 0.5727E-11
round = 168
convergence = 0.4675E-11
round = 169
convergence = 0.3690E-11
round = 170
convergence = 0.3606E-11
round = 171
convergence = 0.3717E-11
round = 172
convergence = 0.3439E-11
round = 173
convergence = 0.2890E-11
round = 174
convergence = 0.2080E-11
round = 175
convergence = 0.1940E-11
round = 176
convergence = 0.1635E-11
round = 177
convergence = 0.1537E-11
round = 178
convergence = 0.1225E-11
round = 179
convergence = 0.9444E-12
179
iterations, convergence
criterion = 0.9444E-12
solutions
stored in file: "solutions"
{'ptn': 3849, 'MinusDamLact': 769, 'nrMn': 4320, 'kraveUp': 4, 'telFn': 4232,
 'AlphaSimDir': '/home/jana/bin/AlphaSim1.05Linux/', 'pripust2n': 0.3999999999999999, 'stNBn': 8640, 'pripustDoz': 27,
 'telMn': 3153, 'gEBV': True, 'pripustUp': 1.4, 'bmUp': 3,
 'genotyped': [('potomciNP', 100.0, 'random', 'M'), ('pb', 100.0, 'random', 'M')], 'pozitivnoTestDoz': 400,
 'StBurnInGen': 20, 'NumberOfDams': 3500, 'mladiDoz': 250, 'bik12n': 378, 'nrFn': 4275, 'mladin': 8, 'NumberOfSires': 4,
 'bmn': 129, 'genpripust1n': 41, 'pripust1n': 19, 'potomciNPn': 45, 'vhlevljenin': 27, 'StSelGen': 40,
 'BurnInYN': False, 'telFnTotal': 4277, 'bmOdbira': 2, 'kn': 10782, 'cak': 3, 'EBV': False, 'pbn': 4, 'genpbn': 5,
 'pbUp': 5}
izl
331532
k
10653
telF
4277
pt
3849
telM
3153
bik12
378
pBM
129
pb
104
genTest
45
bm
43
pripust1
40
cak
24
pripust2
8
gpb
5
Name: cat, dtype: int64
90
izl
331532
k
10653
nr
8550
telF
4277
pt
3849
telM
3153
bik12
378
pBM
129
pb
104
potomciNP
90
genTest
45
bm
43
pripust1
40
cak
24
pripust2
8
gpb
5
Name: cat, dtype: int64
2
331665
1
31215
Name: active, dtype: int64
GenTest5

** ** ** ** ** ** ** ** ** ** **
* *
*AlphaSim *
* *
** ** ** ** ** ** ** ** ** ** **
VERSION:commit - 1801
eac
Software
for simulating phenotype, sequence, and SNP data

No
Liability
Bugs
to
John.Hickey @ roslin.ed.ac.uk

Input
File: AlphaSimSpec.txt

Modelling
population
history
using
InternalCattle
NOTE: When
writing
out
the
full
sequences,
        os.system("./renumf90 < renumParam")  # run renumf90

        #if self.sel == 'class': #ZDJ TEGA NI, KER JE POSEBEJ FILE!
            #os.system("head -n-3 renf90.par > tmp && mv tmp renf90.par")
            #os.system("./blupf90 blupf90_Selection")  # run blupf90

        resource.setrlimit(resource.RLIMIT_STACK, (resource.RLIM_INFINITY, resource.RLIM_INFINITY))
        #os.system('./preGSf90 renf90.par')
        os.system('./blupf90 renf90.par')
        # os.system('./postGSf90 renf90.par')


        #renumber the solutions
        # copy the solution in a file that does not get overwritten
        os.system("bash Match_AFTERRenum.sh")
        shutil.copy('renumbered_Solutions', 'renumbered_Solutions_' + str(blupFiles.gen))
        #shutil.copy('solutions', 'renumbered_Solutions_' + str(blupFiles.gen))

        blupFiles.prepareSelPed()  # obtain solution and add them to
        # AlphaPed PedigreeAndGeneticValues files --> Write them to GenPed_EBV.txt, which is read by module selection


#SelParam je class za okno
class SelParam(QtGui.QMainWindow, Ui_MainWindow):
    def __init__(self):
        QtGui.QMainWindow.__init__(self)
        Ui_MainWindow.__init__(self)
        self.setupUi(self)
        self.AlphaSimDir.clicked.connect(self.choose_dir)
        self.DoMagic.clicked.connect(self.selekcija)
        #self.DoMagic.clicked.connect(self.setSelParam)
        self.SpecFile = AlphaSimSpec()
        # AlphaSimSpec je class iz selection, ki omogoča nastavljanje parametrov AlphaSimSpec fila
        self.setParamDict = defaultdict()
        #self.DoMagic.clicked.connect(self.setSelParam)
        #self.DoMagic.clicked.connect(self.setText)

        #self.gEBV_YN.stateChanged.connect(self.disableEBV)
        self.EBV_YN.stateChanged.connect(self.disablegEBV)
        criteria = ['random', 'PA', 'EBV']
        for i in [self.potomciNP_M_genC, self.potomciNP_F_genC, self.nrM_genC, self.nrF_genC, self.telF_genC, self.k_genC, self.bm_genC, self.pb_genC]:
            i.addItems(criteria)


    #poveži tipko za AlphaSimDir z QFileDialog (posploši za vse take tipke!)
    def choose_dir(self):
        AlphaSimDirPath = QtGui.QFileDialog.getExistingDirectory(self, 'Save Directory')
        if AlphaSimDirPath:
            self.AlphaSimDirShow.setText(AlphaSimDirPath)

    def disableEBV(self):
        if self.gEBV_YN.isChecked():
            self.vhlevljeni.setEnabled(False)
            self.mladi.setEnabled(False)
            #self.cakE.setEnabled(False)
            self.mladiDozE.setEnabled(False)
            self.EBV_YN.setEnabled(False)
        if not self.gEBV_YN.isChecked():
            self.vhlevljeni.setEnabled(True)
            self.mladi.setEnabled(True)
            self.cakE.setEnabled(True)
            self.mladiDozE.setEnabled(True)
            self.EBV_YN.setEnabled(True)

    def disablegEBV(self):
        if self.EBV_YN.isChecked():
            self.gEBV_YN.setEnabled(False)
            self.genpb.setEnabled(False)
            self.genpripust1.setEnabled(False)
            self.GenotypedInd.setEnabled(False)
        if not self.EBV_YN.isChecked():
            self.gEBV_YN.setEnabled(True)
            #self.genmladi.setEnabled(True)


    #funkcija, ki ustvari dict in vseh vnešenih parametrov okna SelParam
    #ta dict potem daš funkciji, ki dela selekcijo oz. nastavlja kategorije
    def setSelParam(self):
        self.setParamDict['genotyped'] = [(str(x.text()), float(xP.text()), str(xC.currentText()), str(sex)) for (x, xP, xC, sex) in
                                          [(self.potomciNP_M_gen, self.potomciNP_M_genP, self.potomciNP_M_genC, 'M'),
                                           (self.potomciNP_F_gen, self.potomciNP_F_genP, self.potomciNP_F_genC, 'F'),
                                           (self.nrF_gen, self.nrF_genP, self.nrF_genC, 'F'),
                                           (self.nrM_gen, self.nrM_genP, self.nrM_genC, 'M'),
                                           (self.telF_gen, self.telF_genP, self.telF_genC, 'F'),
                                           (self.k_gen, self.k_genP, self.k_genC, 'F'),
                                           (self.bm_gen, self.bm_genP, self.bm_genC, 'F'),
                                           (self.pb_gen, self.pb_genP, self.pb_genC, 'M')] if x.isChecked()]
        self.setParamDict['EBV'] = self.EBV_YN.isChecked()
        self.setParamDict['gEBV'] = self.gEBV_YN.isChecked()
        self.setParamDict['stNBn'] = int(self.NoNB.text()) if not self.NoNB.text().isEmpty() else 0
        self.setParamDict['kraveUp'] = int(self.kraveUpE.text()) if not self.kraveUpE.text().isEmpty() else 0
        self.setParamDict['bmOdbira'] = int(self.bmOdbiraE.text()) if not self.bmOdbiraE.text().isEmpty() else 0
        self.setParamDict['bmUp'] = int(self.bmUpE.text()) if not self.bmUpE.text().isEmpty() else 0
        self.setParamDict['cak'] = int(self.cakE.text()) if not self.cakE.text().isEmpty() else 0
        self.setParamDict['pripustUp'] = float((self.pripustUpE.text())) if not self.pripustUpE.text().isEmpty() else 0
        self.setParamDict['pbUp'] = int(self.pbUpE.text()) if not self.pbUpE.text().isEmpty() else 0

        self.setParamDict['pripustDoz'] = int(self.pripustDozE.text()) if not self.pripustDozE.text().isEmpty() else 0
        self.setParamDict['mladiDoz'] = int(self.mladiDozE.text()) if not self.mladiDozE.text().isEmpty() else 0
        self.setParamDict['pozitivnoTestDoz'] = int(
            self.pozitivnoTestDozE.text()) if not self.pozitivnoTestDozE.text().isEmpty() else 0
        self.setParamDict['BurnInYN'] = self.BurnInYNE.isChecked()
        self.setParamDict['StBurnInGen'] = int(self.StBurnInGenE.text()) if not self.StBurnInGenE.text().isEmpty() else 0
        self.setParamDict['StSelGen'] = int(self.SelToGen.text()) if not self.SelToGen.text().isEmpty() else 0
        self.setParamDict['NumberOfSires'] = int(self.NoSires.text()) if not self.NoSires.text().isEmpty() else 0
        self.setParamDict['NumberOfDams'] = int(self.NoDams.text()) if not self.NoDams.text().isEmpty() else 0

        # self.setParamDict['AlphaSimDir'] = choose_dir()

        self.setParamDict['nrMn'] = int(self.setParamDict['stNBn'] * 0.5)
        self.setParamDict['potomciNPn'] = int(
            float(self.potomciNP.text()) * self.setParamDict['nrMn']) if not self.potomciNP.text().isEmpty() else 0

        self.setParamDict['nrFn'] = int(self.setParamDict['stNBn'] * 0.5) - self.setParamDict['potomciNPn']
        self.setParamDict['telFn'] = int(float(self.telF.text()) * self.setParamDict['nrFn']) if not self.telF.text().isEmpty() else 0
        self.setParamDict['telFnTotal'] = int(float(self.telF.text()) * self.setParamDict['nrFn'] + self.setParamDict['potomciNPn']) \
            if not self.telF.text().isEmpty() else 0 #tu prištej, da dobiš končno število telFn (pridejo po dveh poteh, ene preko potomciNP)
        self.setParamDict['ptn'] = int(float(self.pt.text()) * self.setParamDict['telFnTotal']) if not self.pt.text().isEmpty() else 0
        self.setParamDict['MinusDamLact'] = int((1 - float(self.cowsLactLact.text())) * self.setParamDict['ptn']) if not self.cowsLactLact.text().isEmpty() else 0
        self.setParamDict['kn'] = int(self.setParamDict['ptn'] *
                                     self.setParamDict['kraveUp'] - (self.setParamDict['MinusDamLact'] * sum(range((self.setParamDict['kraveUp'])))))
        self.setParamDict['bmn'] = int(
            float(self.bm.text()) * (self.setParamDict['ptn'] *
                                     self.setParamDict['kraveUp'] - (self.setParamDict['MinusDamLact'] * sum(range((self.setParamDict['kraveUp'])))))) if not self.bm.text().isEmpty() else 0

        self.setParamDict['telMn'] = int(float(self.telM.text()) * self.setParamDict['nrMn']) if not self.telF.text().isEmpty() else 0
        self.setParamDict['potomciNPn'] = int(
            float(self.potomciNP.text()) * self.setParamDict['nrMn']) if not self.potomciNP.text().isEmpty() else 0

      #  if self.EBV_YN.isChecked():
        self.setParamDict['vhlevljenin'] = int(
            float(self.vhlevljeni.text()) * self.setParamDict['potomciNPn']) if not self.vhlevljeni.text().isEmpty() else 0
        self.setParamDict['mladin'] = int(
            float(self.mladi.text()) * self.setParamDict['vhlevljenin']) if not self.mladi.text().isEmpty() else 0
        self.setParamDict['pbn'] = int(float(self.pb.text()) * self.setParamDict['mladin']) if not self.pb.text().isEmpty() else 0
        self.setParamDict['pripust1n'] = int(round(
            float(self.pripust1.text()) * self.setParamDict['vhlevljenin'])) if not self.pripust1.text().isEmpty() else 0

        #if self.gEBV_YN.isChecked():
        self.setParamDict['genpbn'] = int(round(float(self.genpb.text()) * self.setParamDict['potomciNPn'])) if not self.pb.text().isEmpty() else 0
        self.setParamDict['genpripust1n'] = int(round(round(
            float(self.genpripust1.text()) * self.setParamDict['potomciNPn'], 1))) if not self.pripust1.text().isEmpty() else 0

        self.setParamDict['bik12n'] = int(float(self.bik12.text()) * self.setParamDict['telMn']) if not self.bik12.text().isEmpty() else 0
        self.setParamDict['pripust2n'] = float(float(self.setParamDict['pripustUp']) - 1)
        self.setParamDict['EliteDamsGenBulls'] = self.EliteDamsGenBulls.isChecked()
        self.setParamDict['CowsGenBulls_Per'] = int((float(self.CowsGenBullsPer.text()) / 100) * self.setParamDict['stNBn']) \
            if not self.CowsGenBullsPer.text().isEmpty() else 0
        self.setParamDict['AlphaSimDir'] = str(self.AlphaSimDirShow.text())
        pd.DataFrame.from_dict(self.setParamDict, orient='index').to_csv('/home/jana/SelectionParam.csv', header=False)
        return self.setParamDict

    #funkcija selekcija
    def selekcija(self):
        self.BurnInYN = self.BurnInYNE.isChecked() #ali izvedeš tudi BurnIn
        self.SelYN = self.PerformSel.isChecked() #ali izvedeš tudi BurnIn
        self.StNB = int(self.NoNB.text())
        self.StBurnInGen = int(self.StBurnInGenE.text())
        self.StSelGen = int(self.NoSelGen.text())
        self.StartSelGen = int(self.SelFromGen.text())
        self.StopSelGen = int(self.SelToGen.text())
        self.NumberOfSires = int(self.NoSires.text()) if not self.NoSires.text().isEmpty() else 0#number of sires in the population
        self.NumberOfDams = int(self.NoDams.text()) if not self.NoDams.text().isEmpty() else 0 # to je za burn in - NoDams in NoSires
        self.AlphaSimDir = str(self.AlphaSimDirShow.text())
        self.AlphaSimPed = str(self.AlphaSimDir).strip('/.') + '/SimulatedData/PedigreeAndGeneticValues.txt'
        self.seltype = ['class' if self.EBV_YN.isChecked() else 'gen'][0]


        ##############################################################################
#burnin        #ce NAJ se izvede tudi burn in - ce ga se nimas
##############################################################################
        if self.BurnInYN:
            # prestavi se v AlphaSim Dir
            os.chdir(self.AlphaSimDir)
            shutil.copy(self.SpecFile.genSpecFile, self.AlphaSimDir) #skopiraj generično ALphaSimSpec datoteko v AlphaSimDir
            self.SpecFile.setPedType("Internal") #pedigree je za burn in internal
            self.SpecFile.setNB(self.StNB) #stevilo novorojenih
            self.SpecFile.setBurnInGen(self.StBurnInGen) #stevilo burnINGen
            self.SpecFile.setSelGen(self.StSelGen) #st selection gen
            self.SpecFile.setNoSires(self.NumberOfSires)
            self.SpecFile.setNoDams(self.NumberOfDams)
            self.SpecFile.turnOnGenFlex()
            self.SpecFile.setFlexGenToFrom(1, (self.StBurnInGen + 1)) #pozeni od generacije 1 do burnin+1
            self.SpecFile.turnOnSelFlex()
            self.SpecFile.setExtPedForGen(self.StBurnInGen + 1) #za katero generacijo uvozi external pedigre  - ena po burn in
            self.SpecFile.setTBVComp(1) #skomputiraj TBV
            # pozenes ALPHASIM
            os.system('./AlphaSim1.05')
##############################################################################
        if self.SelYN: #če naj izvedem tudi selekcijo
            #ko si ustvaril burn in - ali pa ga imaš od prej - imaš torej PEdigreeAndGeneticValues
                #za VSAK KROG selekcije
            #1) vzami AlphaSim sproduciran PedigreeAndGeneticValues
            #2) preračunaj TBV --> EBV, doloci zeljeno korelacijo
            #3) nastavi kategorije (nastavi kategorije glede na EBV) ali izvedi selekcijo (določi kategorije glede na prejšenje leto)
            #obe določita starše novim živalim - torej dodata novo generacijo plus starše
            #obe ustvarita external pedigree za naslednjo generacijo


            for roundNo in range(self.StartSelGen, (self.StopSelGen + 1)): #za vsak krog selekcije
                # prestavi se v AlphaSim Dir
                os.chdir(self.AlphaSimDir)


                # USTVARI EXTERNAL PEDIGREE
                # doloci kategorije zivalim v pedigreju - če je to prvi krog, nastavi kategorije,
                # ce pa je to eden od naslednjih krogov, pa preberi kategorije iz prejsnje generacije
                # selekcija_total zapise kategorije, sex in active za vsako generacijo
                # nastavi_cat in selekcija_total ti zapišeta ExternalPedigree.txt
                if roundNo == 1:  # če je to prvi krog - nimaš še kategorij od prej, nimaš niti EBV-jev
                    # odstrani Blupf90 fajle iz prejšnjih runov - ker se merge-a
                    # enako tudi za generacijski interval in file z genotipi
                    if os.path.isfile(self.AlphaSimDir + 'Blupf90.dat'):
                        os.remove(self.AlphaSimDir + 'Blupf90.dat')
                    if os.path.isfile(self.AlphaSimDir + 'GenInts.txt'):
                        os.remove(self.AlphaSimDir + 'GenInts.txt')
                    if os.path.isfile(self.AlphaSimDir + 'GenoFile.txt'):
                        os.remove(self.AlphaSimDir + 'GenoFile.txt')
                    if os.path.isfile(self.AlphaSimDir + 'IndForGeno.txt'):
                        os.remove(self.AlphaSimDir + 'IndForGeno.txt')
                    if os.path.isfile(self.AlphaSimDir + 'GenTrends_gen.csv'):
                        os.remove(self.AlphaSimDir + 'GenTrends_gen.csv')
                    if os.path.isfile(self.AlphaSimDir + 'GenTrends_cat.csv'):
                        os.remove(self.AlphaSimDir + 'GenTrends_cat.csv')
                    if os.path.isfile(self.AlphaSimDir + 'Accuracies_Cat.csv'):
                        os.remove(self.AlphaSimDir + 'Accuracies_Cat.csv')
                    if os.path.isfile(self.AlphaSimDir + 'Accuracies_Gen.csv'):
                        os.remove(self.AlphaSimDir + 'Accuracies_Gen.csv')
                    #if os.path.isfile(self.AlphaSimDir + 'AccuraciesBV.csv'):
                        #os.remove(self.AlphaSimDir + 'AccuraciesBV.csv')

                    Acc = accuracies(self.AlphaSimDir) #nastavi
                    GenTrends = TBVCat(self.AlphaSimDir)
                    #nimaš GenPed_EBV.txt
                    blups = estimateBV(self.AlphaSimDir, way='burnin_milk', sel=self.seltype)
                    blups.computeEBV(self.StNB) #tukaj izbriši samo fenotipe moških - ne morš po kategorijah, ker jih nimaš
                    #Acc.saveAcc()
                    nastavi_cat('GenPed_EBV.txt', **self.setSelParam())

                elif roundNo > 1:
                    Acc = accuracies(self.AlphaSimDir)
                    GenTrends = TBVCat(self.AlphaSimDir)
                    # izvedi selekcijo, doloci kategorije zivali, dodaj novo generacijo in dodeli starse
                    # pedigre se zapise v AlphaSimDir/SelectionFolder/ExternalPedigree.txt
                    selekcija_total('GenPed_EBV.txt', **self.setSelParam())

                # kopiraj pedigre v selection folder
                if not os.path.exists(self.AlphaSimDir + '/Selection/SelectionFolder' + str(roundNo) + '/'):
                    os.makedirs(self.AlphaSimDir + '/Selection/SelectionFolder' + str(roundNo) + '/')
                shutil.copy(self.AlphaSimDir + 'ExternalPedigree.txt',
                            self.AlphaSimDir + '/Selection/SelectionFolder' + str(roundNo) + '/')
                # TUKAJ POTEM popravis AlphaSimSpec
                # PRVIc PO BURN IN-U
                shutil.copy(self.SpecFile.genSpecFile,
                            self.AlphaSimDir)  # skopiraj generično ALphaSimSpec datoteko v AlphaSimDir
                self.SpecFile = AlphaSimSpec()  # AlphaSimSpec je class iz selection, ki omogoča nastavljanje parametrov AlphaSimSpec fila
                self.SpecFile.setPedType("ExternalPedigree.txt")
                self.SpecFile.setBurnInGen(self.StBurnInGen)
                self.SpecFile.setSelGen(self.StSelGen)
                self.SpecFile.setNoSires(0)
                self.SpecFile.setNoDams(0)
                self.SpecFile.turnOnGenFlex()
                self.SpecFile.setFlexGenToFrom((self.StBurnInGen + roundNo), (self.StBurnInGen + roundNo))
                self.SpecFile.turnOnSelFlex()
                self.SpecFile.setExtPedForGen(self.StBurnInGen + roundNo)
                self.SpecFile.setTBVComp(2)
                self.SpecFile.setNB(self.StNB)
                # pozenes ALPHASIM
                os.system('./AlphaSim1.05')

                # tukaj dodaj kategorije k PedigreeAndGeneticValues (AlphaSim File)
                PedCat = OrigPed(self.AlphaSimDir)
                PedCat.addInfo() #to ti zapiše PedigreeAndGeneticValues_cat.txt v AlphaSim/SimualatedData

                #tukaj pridobi podatke za generacijske intervale
                GenInt = genInterval(self.AlphaSimDir) #tukaj preberi celoten pedigre
                if self.seltype == 'class':
                    GenInt.prepareGenInts(['vhlevljeni', 'pt']) #pri klasični so izrbrani potomci vhlevljeni (test in pripust) in plemenske telice
                if self.seltype == 'gen':
                    GenInt.prepareGenInts(['genTest', 'pt']) #pri klasični so izbrani potomci vsi genomsko testirani (pozTest in pripust) in plemenske telice
                blupNextGen = estimateBV(self.AlphaSimDir, way='milk', sel=self.seltype)
                blupNextGen.computeEBV(self.StNB) #estimate EBV with added phenotypes only of animals of certain category (here = milk)
                Acc.saveAcc()
                GenTrends.saveTrends()
                #zdaj za vsako zapiši, ker vsakič na novo prebereš
                Acc.writeAcc()
                GenTrends.writeTrends()
            print 'Process finished'

        def setText(self):
            self.message.setText('Button Clicked')




"""
if __name__ == "__main__":
    app = QtGui.QApplication(sys.argv)
    window = SelParam()
    window.show()
    window.NoNB.setText('6700')
    window.telF.setText('0.966')
    window.pt.setText('0.85')
    window.bm.setText('0.0127')
    window.cowsLactLact.setText('0.8')
    window.potomciNP.setText('0.0135')
    window.vhlevljeni.setText('0.6')
    window.mladi.setText('0.3')
    window.pb.setText('0.5')
    window.pripust1.setText('0.7')
    window.telM.setText('0.73')
    window.bik12.setText('0.12')
    window.kraveUpE.setText('4')
    window.bmOdbiraE.setText('2')
    window.bmUpE.setText('3')
    window.cakE.setText('3')
    window.pripustUpE.setText('1.4')
    window.pbUpE.setText('5')
    window.mladiDozE.setText('250')
    window.pripustDozE.setText('27')
    window.pozitivnoTestDozE.setText('220')
    window.StBurnInGenE.setText('10')
    window.NoSelGen.setText('20')
    window.SelFromGen.setText('2')
    window.SelToGen.setText('2')
    window.AlphaSimDirShow.setText('/home/jana/bin/AlphaSim1.05Linux/')
    sys.exit(app.exec_())

if __name__ == "__main__":
    app = QtGui.QApplication(sys.argv)
    window = SelParam()
    window.show()
    window.NoNB.setText('100')
    window.telF.setText('0.96')
    window.cowsLactLact.setText('0.8')
    window.pt.setText('0.9')
    window.bm.setText('0.1')
    window.potomciNP.setText('0.12')
    window.vhlevljeni.setText('0.667')
    window.mladi.setText('0.5')
    window.pb.setText('0.5')
    window.genpb.setText('0.2')
    window.pripust1.setText('0.5')
    window.genpripust1.setText('0.8')
    window.telM.setText('0.68')
    window.bik12.setText('0.333')
    window.kraveUpE.setText('4')
    window.bmOdbiraE.setText('2')
    window.bmUpE.setText('3')
    window.cakE.setText('3')
    window.pripustUpE.setText('1.5')
    window.pbUpE.setText('5')
    window.mladiDozE.setText('25')
    window.pripustDozE.setText('5')
    window.pozitivnoTestDozE.setText('35')
    window.StBurnInGenE.setText('10')
    window.NoSelGen.setText('20')
    window.NoDams.setText('40')
    window.NoSires.setText('1')
    window.SelFromGen.setText('1')
    window.SelToGen.setText('5')
    window.AlphaSimDirShow.setText('/home/jana/bin/AlphaSim1.05Linux/')
    sys.exit(app.exec_())


"""
if __name__ == "__main__":
    app = QtGui.QApplication(sys.argv)
    window = SelParam()
    window.show()
    window.NoNB.setText('8640')
    window.NoSires.setText('4')
    window.NoDams.setText('3500')
    window.telF.setText('0.99')
    window.pt.setText('0.9')
    window.bm.setText('0.012')
    window.cowsLactLact.setText('0.8')
    window.potomciNP.setText('0.0105')
    window.vhlevljeni.setText('0.6')
    window.mladi.setText('0.3')
    window.pb.setText('0.5')
    window.genpb.setText('0.1')
    window.pripust1.setText('0.7')
    window.genpripust1.setText('0.9')
    window.telM.setText('0.73')
    window.bik12.setText('0.12')
    window.kraveUpE.setText('4')
    window.bmOdbiraE.setText('2')
    window.bmUpE.setText('3')
    window.cakE.setText('3')
    window.pripustUpE.setText('1.4')
    window.pbUpE.setText('5')
    window.mladiDozE.setText('250')
    window.pripustDozE.setText('27')
    window.pozitivnoTestDozE.setText('400')
    window.StBurnInGenE.setText('20')
    window.NoSelGen.setText('40')
    window.SelFromGen.setText('21')
    window.SelToGen.setText('40')
    window.potomciNP_M_genP.setText('100')
    window.k_genP.setText('10')
    window.pb_genP.setText('100')
    window.AlphaSimDirShow.setText('/home/jana/bin/AlphaSim1.05Linux/')
    sys.exit(app.exec_())
